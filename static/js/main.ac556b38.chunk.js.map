{"version":3,"sources":["Components/card/card.component.jsx","Components/card-list/card-list.component.jsx","Components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","Cardlist","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAgBeA,G,kBAXF,SAACC,GAAD,OAET,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,gCAAOL,EAAMI,QAAQE,MACrB,2BAAIN,EAAMI,QAAQG,UCMPC,EAXE,SAACR,GAEd,OAAO,yBAAKC,UAAW,aAGnBD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCE7BQ,G,MAVG,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACd,2BACAC,KAAK,SACLF,YAAaA,EACbG,SAAUF,EACVb,UAAW,aC+CAgB,E,kDAhDf,aAAgB,IAAD,8BACX,gBAsBJH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SArBvC,EAAKC,MAAQ,CAEXd,SAAU,GAEVW,YAAY,IAPH,E,gEAcM,IAAD,OAElBI,MAAO,8CAENC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAASmB,S,+BAM/B,MAE0BC,KAAKN,MAA/Bd,EAFA,EAEAA,SAAUW,EAFV,EAEUA,YAEZU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAE9CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAGlD,OAEM,yBAAK/B,UAAU,OACf,+CACA,kBAAC,EAAD,CACAY,YAAY,kBACZC,aAAce,KAAKf,eACnB,kBAAC,EAAD,CAAUL,SAAWqB,S,GA3CXI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ac556b38.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.scss';\n\n\n\nconst Card = (props) => (\n\n    <div className='card-container'>\n    <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n    <h2 > {props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n    </div>\n\n)\n\n\nexport default Card;\n","import React from \"react\";\nimport './car-list.styles.scss';\n\nimport Card from '../card/card.component.jsx'\n\nconst Cardlist = (props) => {\n\n    return <div className= 'card-list'>\n    \n    {\n        props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster} />))\n    }\n      </div>\n}\n\nexport default Cardlist;","import React from 'react';\nimport './search-box.styles.scss';\n\nconst SearchBox = ({placeholder, handleChange}) => (\n    <input \n    type='search' \n    placeholder={placeholder}\n    onChange={handleChange}\n    className= 'search'\n    />\n\n)\n\nexport default SearchBox;","import React, {Component} from 'react';\nimport './App.css';\n\nimport Cardlist from './Components/card-list/card-list.component';\nimport SearchBox from './Components/search-box/search-box.component.jsx';\n\nclass App extends Component {\nconstructor () {\n    super ();\n\n    this.state = {\n\n      monsters: [],\n      //we need to store string from search to find card\n      searchField:''\n    };\n    //when we create methods, in the old react language we needed to bind the word this because it was not defined within the new method created.\n    //this.handleChange= this.handleChange.bind(this);\n};\n\n// this is a lifecycle that gets activated when React sends a component for the first time.\ncomponentDidMount() {\n  //this is a javascript method that allows to fetch data from any external server\n  fetch (\"https://jsonplaceholder.typicode.com/users\")\n  // after fetching the data we need to get it in an understandable language for the computer. meaning JSON format. We do that by using the .then method that comes from javascript. We set up response as the name for the item that we will get back and then transform it in a json format. \n  .then(response => response.json())\n  // calling the then method, we populate the state with new information coming from the external source. We use the setState mehod and set monsters to equal the users json file. \n  .then(users => this.setState({monsters:users}));\n};\n\nhandleChange = (event) => {\n  this.setState({searchField: event.target.value})\n}\nrender () {\n  // we destructured the state and got 2 constants that will be used to filter what the person typed in the searchfield. \n  const { monsters, searchField } = this.state; \n  // we created a new constant that will filter the arrays\n  const filteredMonsters = monsters.filter(monster => \n    // when using the .include method, we compare whats inside the parenthesis with the previous statement. In this case, we compare the name of the monster transformed to lowercase with the searchfield input converted in lowercase, then that will be rendered.\n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n  return (\n\n        <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox \n        placeholder='Search Monsters' \n        handleChange={this.handleChange}/>\n        <Cardlist monsters= {filteredMonsters}/>\n        </div>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}